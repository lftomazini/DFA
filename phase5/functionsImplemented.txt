Alphabet.java:
	Alphabet.java generates a character array that represents our alphabet

	Alphabet(): constructor
	printAll(): prints values
	getValues(): returns array of values

Derivative.java:
	Derivative.java is used to find the derivative of an expression tree

	Derivative(char a, ExpTree tree): constructor
	getDerivative(char c, ExpTree tree): computes deriv. given char and RE
	v2(ExpTree t): returns & (epsilon) if v(t), else returns @(null set) 
	v(ExpTree t): returns bool result of "is t nullable?"

DFA.java:
	DFA.java represents a DFA, it contains a State object to hold its states, an
	alphabet, a Trans object that holds all the transitions, as well as a
	Derivative object to get derivatives.

	Delta:
		Delta(int c, char l, int n): constructor
	Trans:
		Trans(): constructor
		add(Delta item): add transition
	States:
		States(): constructor
		add(ExpTree item): add new item to tree
	DFA:
		DFA(): constructor
		createDFA(ExpTree regExp): fills tree iter.ing over alphabet
		DFAState:
			DFAState(ExpTree language): constructor
			initialize(): inits the DFAState
		Tuple:
			Tuple(char ch, DFAState t): constructor

ExpTree.java:
	ExpTree.java is how languages are represented, they contain a value, an
	operation, and a left and right ExpTree

	ExpTree(String s): constructor
	ExpTree(Operation o): constructor
	convert(ExpTree t): returns the String equivalent of the regexp represented by this tree
	isEqual(ExpTree otherTree): tree equality check
	print(): returns string representation of the tree (for debugging)
	  OP(arg1, OP(OP(arg2, arg3), arg4))

RandStrGen.java:
	RandStrGen.java is used to obtain random strings for us to test our RE matcher

	RandStrGen(Alphabet A): constructor
	genString(int length): gen str of length from random chars in alphabet
	genStrings(int numStrings, int length): run genString numStrings times

REMatcher.java:
	REMatcher.java is used to match a string to a DFA that is already created
	REMatcher(ExpTree regExp): constructor
	isMatch(String s): matches the str against the RE => in lang or not

Tester.java:
	randomRE(int size): randomly generates an ExpTree with up to 'size'
		     nodes (sometimes fewer b/c calls w/ size=2 instead return 
		     a subtree with only 1 node, else there would be a
		     disproportionate num. of * operators in the tree)
        assign(ArrayList<String> randStrings): adds a number (depending on global 
				 vars 'BASE' and 'MAX_POWER') of random strings 
				 (created by the next function, generate) to the 
				 given ArrayList
	generate(int aux): returns a randomly generated string using 'aux' as a seed
	hasStarStack(ExpTree t): returns true if the tree has any * node with 
			     another * as its child, otherwise returns false
        findStarStacks(ExpTree[] trees): runs hasStarStack on the given list of
				 ExpTrees and returns a list of ExpTrees with at
				 least one star stack
        testCompleteness(int numTrials, int lenOfStrs): Runs 'numTrials' tests 
			     comparing the results of Java Regex's output
    			     to the output of the DFA RE on randomly generated 
			     strings. Returns false as soon as it finds a string on 
			     which the two behave differently, otherwise, at the 
			     end of trials, returns true 
	Also contains a "main" method, used to test the soundness,
	completeness, and space/time efficency of our DFA implementation
