Alphabet.java:
	Alphabet.java generates a character array that represents our alphabet

	Alphabet(): constructor
	printAll(): prints values
	getValues(): returns array of values

Derivative.java:
	Derivative.java is used to find the derivative of an expression tree

	Derivative(char a, ExpTree tree): constructor
	getDerivative(char c, ExpTree tree): computes deriv. given char and RE
	v2(ExpTree t): nullification
	v(ExpTree t): nullification

DFA.java:
	DFA.java represents a DFA, it contains a State object to hold its states, an
	alphabet, a Trans object that holds all the transitions, as well as a
	Derivative object to get derivatives.

	Delta:
		Delta(int c, char l, int n): constructor
	Trans:
		Trans(): constructor
		add(Delta item): add transition
	States:
		States(): constructor
		add(ExpTree item): add new item to tree
	DFA:
		DFA(): constructor
		createDFA(ExpTree regExp): fills tree iter.ing over alphabet
		DFAState:
			DFAState(ExpTree language): constructor
			initialize(): inits the DFAState
		Tuple:
			Tuple(char ch, DFAState t): constructor

ExpTree.java:
	ExpTree.java is how languages are represented, they contain a value, an
	operation, and a left and right ExpTree

	ExpTree(String s): constructor
	ExpTree(Operation o): constructor
	isEqual(ExpTree otherTree): tree equality check

RandStrGen.java:
	RandStrGen.java is used to obtain random strings for us to test our RE matcher

	RandStrGen(Alphabet A): constructor
	genString(int length): gen str of length from random chars in alphabet
	genStrings(int numStrings, int length): run genString numStrings times

REMatcher.java:
	REMatcher.java is used to match a string to a DFA that is already created

	REMatcher(ExpTree regExp): constructor
	isMatch(String s): matches the str against the RE => in lang or not

Tester.java:
	Tester.java just contains a main method, and it is used to test the soundness,
	completeness, and space time efficency of our DFA implementation
